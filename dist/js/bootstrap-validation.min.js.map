{"version":3,"file":"bootstrap-validation.min.js","sources":["../../src/constants/index.js","../../src/utils/index.js","../../src/rules/index.js","../../src/rules/notEmpty.js","../../src/rules/stringLength.js","../../src/bootstrap-validation.js"],"sourcesContent":["// 版本号\r\nconst VERSION = '0.5.3'\r\n\r\n//默认选项\r\nconst DEFAULTS = {\r\n    // 第一个无效字段将自动聚焦\r\n    autoFocus: true,\r\n\r\n    //错误消息容器。可以是:\r\n    // - 'tooltip' 如果要使用引导工具提示显示错误消息\r\n    // - 'popover' 如果要使用引导弹出窗口显示错误消息\r\n    // - css选择器指定的容器\r\n    // 在前两种情况下，由于工具提示/popover应该足够小，因此插件只显示一条错误消息\r\n    // 您还可以为特定字段定义消息容器\r\n    container: null,\r\n\r\n    // 表单CSS类\r\n    elementClass: 'bv-form',\r\n\r\n    // 使用自定义事件名称以避免jQuery调用window.onerror\r\n    // See https://github.com/nghuuphuoc/bootstrapvalidator/issues/630\r\n    events: {\r\n        formInit: 'init.form.bv',\r\n        formError: 'error.form.bv',\r\n        formSuccess: 'success.form.bv',\r\n        fieldAdded: 'added.field.bv',\r\n        fieldRemoved: 'removed.field.bv',\r\n        fieldInit: 'init.field.bv',\r\n        fieldError: 'error.field.bv',\r\n        fieldSuccess: 'success.field.bv',\r\n        fieldStatus: 'status.field.bv',\r\n        validatorError: 'error.validator.bv',\r\n        validatorSuccess: 'success.validator.bv'\r\n    },\r\n\r\n    // 指示将不被验证的字段\r\n    excluded: [':disabled', ':hidden', ':not(:visible)'],\r\n    //反馈图标\r\n    feedbackIcons: {\r\n        valid: null,\r\n        invalid: null,\r\n        validating: null\r\n    },\r\n\r\n\r\n    // 使用验证器规则映射字段名称\r\n    fields: null,\r\n\r\n    // 用于指示元素的CSS选择器由字段组成\r\n    // 默认情况下，每个字段都放置在<div class=“form group”></div>中\r\n    // 如果您的表单组包含许多字段，但并非所有字段都需要验证，则应调整此选项\r\n    group: '.form-group',\r\n\r\n    // 实时验证选项\r\n    // 可以是3个值之一:\r\n    // - enabled: 该插件在字段更改后立即验证字段\r\n    // - disabled: 禁用实时验证。只有在提交表单后才会显示错误消息\r\n    // - submitted: 表单提交后启用实时验证\r\n    live: 'enabled',\r\n\r\n    // 默认无效消息\r\n    message: 'This value is not valid',\r\n\r\n    // 提交按钮选择器\r\n    // 这些按钮将被禁用，以防止有效表单多次提交\r\n    submitButtons: '[type=\"submit\"]',\r\n\r\n    // 如果字段长度小于此字符数，则不会对其进行实时验证\r\n    threshold: null,\r\n\r\n    // 验证字段时是否详细.\r\n    // 可能值:\r\n    // - true:  当一个字段有多个验证器时，将分别检查所有验证器，如果多个验证器中出现错误，则将向用户显示所有验证器\r\n    // - false: 当一个字段有多个验证器时，该字段的验证将在第一次遇到错误时终止。因此，只有与该字段相关的第一条错误消息才会显示给用户\r\n    verbose: true\r\n};\r\nexport default {\r\n    VERSION,\r\n    DEFAULTS,\r\n}\r\n","export default {\r\n\r\n    /**\r\n     * 执行回调函数\r\n     *\r\n     * @param {String|Function} functionName Can be\r\n     * - 全局函数的名称\r\n     * - 命名空间函数的名称（如A.B.C）\r\n     * - 函数\r\n     * @param {Array} args 回调参数\r\n     */\r\n    call(functionName, args) {\r\n        if ('function' === typeof functionName) {\r\n            return functionName.apply(this, args);\r\n        } else if ('string' === typeof functionName) {\r\n            if ('()' === functionName.substring(functionName.length - 2)) {\r\n                functionName = functionName.substring(0, functionName.length - 2);\r\n            }\r\n            let ns = functionName.split('.'),\r\n                func = ns.pop(),\r\n                context = window;\r\n            for (let i = 0; i < ns.length; i++) {\r\n                context = context[ns[i]];\r\n            }\r\n            return (typeof context[func] === 'undefined') ? null : context[func].apply(this, args);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 设置字符串格式\r\n     * 它用于格式化错误消息\r\n     * format（“字段必须介于%s和%s之间”，[10，20]）=“字段必须在10和20之间”\r\n     *\r\n     * @param {String} message\r\n     * @param {Array} parameters\r\n     * @returns {String}\r\n     */\r\n    format(message, parameters) {\r\n        if (!$.isArray(parameters)) {\r\n            parameters = [parameters];\r\n        }\r\n\r\n        for (let i in parameters) {\r\n            message = message.replace('%s', parameters[i]);\r\n        }\r\n\r\n        return message;\r\n    },\r\n\r\n    /**\r\n     * 验证日期\r\n     *\r\n     * @param {Number} year 4位数的全年\r\n     * @param {Number} month 月份编号\r\n     * @param {Number} day 日期编号\r\n     * @param {Boolean} [notInFuture] 如果为true，则日期不得在将来\r\n     * @returns {Boolean}\r\n     */\r\n    date(year, month, day, notInFuture) {\r\n        if (isNaN(year) || isNaN(month) || isNaN(day)) {\r\n            return false;\r\n        }\r\n        if (day.length > 2 || month.length > 2 || year.length > 4) {\r\n            return false;\r\n        }\r\n\r\n        day = parseInt(day, 10);\r\n        month = parseInt(month, 10);\r\n        year = parseInt(year, 10);\r\n\r\n        if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\r\n            return false;\r\n        }\r\n        let numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        // Update the number of days in Feb of leap year\r\n        if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\r\n            numDays[1] = 29;\r\n        }\r\n\r\n        // Check the day\r\n        if (day <= 0 || day > numDays[month - 1]) {\r\n            return false;\r\n        }\r\n\r\n        if (notInFuture === true) {\r\n            let currentDate = new Date(),\r\n                currentYear = currentDate.getFullYear(),\r\n                currentMonth = currentDate.getMonth(),\r\n                currentDay = currentDate.getDate();\r\n            return (year < currentYear\r\n                || (year === currentYear && month - 1 < currentMonth)\r\n                || (year === currentYear && month - 1 === currentMonth && day < currentDay));\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * 实现Luhn验证算法\r\n     * Credit to https://gist.github.com/ShirtlessKirk/2134376\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Luhn\r\n     * @param {String} value\r\n     * @returns {Boolean}\r\n     */\r\n    luhn(value) {\r\n        let length = value.length,\r\n            mul = 0,\r\n            prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\r\n            sum = 0;\r\n\r\n        while (length--) {\r\n            sum += prodArr[mul][parseInt(value.charAt(length), 10)];\r\n            mul ^= 1;\r\n        }\r\n\r\n        return (sum % 10 === 0 && sum > 0);\r\n    },\r\n\r\n    /**\r\n     * 实现模数11，10（ISO 7064）算法\r\n     *\r\n     * @param {String} value\r\n     * @returns {Boolean}\r\n     */\r\n    mod11And10(value) {\r\n        let check = 5,\r\n            length = value.length;\r\n        for (let i = 0; i < length; i++) {\r\n            check = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;\r\n        }\r\n        return (check === 1);\r\n    },\r\n\r\n    /**\r\n     * 实施Mod 37、36（ISO 7064）算法\r\n     * Usages:\r\n     * mod37And36('A12425GABC1234002M')\r\n     * mod37And36('002006673085', '0123456789')\r\n     *\r\n     * @param {String} value\r\n     * @param {String} [alphabet]\r\n     * @returns {Boolean}\r\n     */\r\n    mod37And36(value, alphabet) {\r\n        alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        let modulus = alphabet.length,\r\n            length = value.length,\r\n            check = Math.floor(modulus / 2);\r\n        for (let i = 0; i < length; i++) {\r\n            check = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\r\n        }\r\n        return (check === 1);\r\n    }\r\n\r\n}\r\n","import notEmpty from \"./notEmpty\";\r\nimport stringLength from \"./stringLength\";\r\n\r\nexport default {\r\n    notEmpty,\r\n    stringLength\r\n}\r\n","export default {\r\n\r\n    enableByHtml5($field) {\r\n        let required = $field.attr('required') + '';\r\n        return ('required' === required || 'true' === required);\r\n    },\r\n\r\n    /**\r\n     * Check if input value is empty or not\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options\r\n     * @returns {Boolean}\r\n     */\r\n    validate(validator, $field, options) {\r\n        console.log(options)\r\n        let type = $field.attr('type');\r\n        if ('radio' === type || 'checkbox' === type) {\r\n            return validator\r\n                .getFieldElements($field.attr('data-bv-field'))\r\n                .filter(':checked')\r\n                .length > 0;\r\n        }\r\n\r\n        if ('number' === type && $field.get(0).validity && $field.get(0).validity.badInput === true) {\r\n            return true;\r\n        }\r\n\r\n        return $.trim($field.val()) !== '';\r\n    }\r\n}\r\n","import Utils from \"../utils\";\r\n\r\nexport default {\r\n    html5Attributes: {\r\n        message: 'message',\r\n        min: 'min',\r\n        max: 'max',\r\n        trim: 'trim',\r\n        utf8bytes: 'utf8Bytes'\r\n    },\r\n\r\n    enableByHtml5: function ($field) {\r\n        let options = {},\r\n            maxLength = $field.attr('maxlength'),\r\n            minLength = $field.attr('minlength');\r\n        if (maxLength) {\r\n            options.max = parseInt(maxLength, 10);\r\n        }\r\n        if (minLength) {\r\n            options.min = parseInt(minLength, 10);\r\n        }\r\n\r\n        return $.isEmptyObject(options) ? false : options;\r\n    },\r\n\r\n    /**\r\n     * Check if the length of element value is less or more than given number\r\n     *\r\n     * @param {BootstrapValidator} validator The validator plugin instance\r\n     * @param {jQuery} $field Field element\r\n     * @param {Object} options Consists of following keys:\r\n     * - min\r\n     * - max\r\n     * At least one of two keys is required\r\n     * The min, max keys define the number which the field value compares to. min, max can be\r\n     *      - A number\r\n     *      - Name of field which its value defines the number\r\n     *      - Name of callback function that returns the number\r\n     *      - A callback function that returns the number\r\n     *\r\n     * - message: The invalid message\r\n     * - trim: Indicate the length will be calculated after trimming the value or not. It is false, by default\r\n     * - utf8bytes: Evaluate string length in UTF-8 bytes, default to false\r\n     * @returns {Object}\r\n     */\r\n    validate: function (validator, $field, options) {\r\n        let value = $field.val();\r\n        if (options.trim === true || options.trim === 'true') {\r\n            value = $.trim(value);\r\n        }\r\n\r\n        if (value === '') {\r\n            return true;\r\n        }\r\n\r\n        let min = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\r\n            max = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\r\n            // Credit to http://stackoverflow.com/a/23329386 (@lovasoa) for UTF-8 byte length code\r\n            utf8Length = function (str) {\r\n                let s = str.length;\r\n                for (let i = str.length - 1; i >= 0; i--) {\r\n                    let code = str.charCodeAt(i);\r\n                    if (code > 0x7f && code <= 0x7ff) {\r\n                        s++;\r\n                    } else if (code > 0x7ff && code <= 0xffff) {\r\n                        s += 2;\r\n                    }\r\n                    if (code >= 0xDC00 && code <= 0xDFFF) {\r\n                        i--;\r\n                    }\r\n                }\r\n                return s;\r\n            },\r\n            length = options.utf8Bytes ? utf8Length(value) : value.length,\r\n            isValid = true,\r\n            message = options.message || $.fn.bootstrapValidation.i18n.stringLength['default'];\r\n\r\n        if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {\r\n            isValid = false;\r\n        }\r\n\r\n        switch (true) {\r\n            case (!!min && !!max):\r\n                message = Utils.format(options.message || $.fn.bootstrapValidation.i18n.stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\r\n                break;\r\n\r\n            case (!!min):\r\n                message = Utils.format(options.message || $.fn.bootstrapValidation.i18n.stringLength.more, parseInt(min, 10));\r\n                break;\r\n\r\n            case (!!max):\r\n                message = Utils.format(options.message || $.fn.bootstrapValidation.i18n.stringLength.less, parseInt(max, 10));\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return {valid: isValid, message: message};\r\n    }\r\n}\r\n","import $ from 'jquery'\r\nimport Constants from \"./constants\";\r\nimport Utils from \"./utils\";\r\nimport Rules from \"./rules\";\r\n\r\n\r\nconst NAME = 'bootstrapValidation'\r\n\r\n\r\nclass BootstrapValidation {\r\n\r\n    // 确定用户更改字段值时激发的事件\r\n    #changeEvent = 'input'\r\n    // 当远程/回调验证器返回时，指示表单已准备好提交的标志\r\n    #submitIfValid = null;\r\n    // 缓存的字段元素\r\n    #cacheFields = {};\r\n\r\n\r\n    constructor(el, options) {\r\n        this.options = options\r\n        this.$form = $(el)\r\n\r\n        //无效字段\r\n        this.$invalidFields = $([]);    // 无效字段数组\r\n        //提交按钮\r\n        this.$submitButton = null;     // 单击以提交表单的提交按钮\r\n        // 隐藏按钮\r\n        this.$hiddenButton = null;\r\n\r\n        // 没有验证的\r\n        this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';\r\n        // 验证中\r\n        this.STATUS_VALIDATING = 'VALIDATING';\r\n        // 验证无效的\r\n        this.STATUS_INVALID = 'INVALID';\r\n        // 验证通过的\r\n        this.STATUS_VALID = 'VALID';\r\n\r\n        //调用初始化方法\r\n        this.#init();\r\n\r\n        let b = 10;\r\n    }\r\n\r\n\r\n    /**\r\n     * 初始化表单\r\n     */\r\n    #init() {\r\n\r\n        //that是当前实例,这里取出来是避免下面在各种匿名函数中混淆this指向\r\n\r\n        let that = this;\r\n\r\n        //默认的选项\r\n        let options = {\r\n            autoFocus: this.$form.attr('data-bv-autofocus'),\r\n            //指示错误信息的css选择器\r\n            container: this.$form.attr('data-bv-container'),\r\n            //事件从属性里读取一遍。\r\n            events: {\r\n                formInit: this.$form.attr('data-bv-events-form-init'),\r\n                formError: this.$form.attr('data-bv-events-form-error'),\r\n                formSuccess: this.$form.attr('data-bv-events-form-success'),\r\n                fieldAdded: this.$form.attr('data-bv-events-field-added'),\r\n                fieldRemoved: this.$form.attr('data-bv-events-field-removed'),\r\n                fieldInit: this.$form.attr('data-bv-events-field-init'),\r\n                fieldError: this.$form.attr('data-bv-events-field-error'),\r\n                fieldSuccess: this.$form.attr('data-bv-events-field-success'),\r\n                fieldStatus: this.$form.attr('data-bv-events-field-status'),\r\n                validatorError: this.$form.attr('data-bv-events-validator-error'),\r\n                validatorSuccess: this.$form.attr('data-bv-events-validator-success')\r\n            },\r\n            //排除验证的字段\r\n            excluded: this.$form.attr('data-bv-excluded'),\r\n            feedbackIcons: {\r\n                valid: this.$form.attr('data-bv-feedbackicons-valid'),\r\n                invalid: this.$form.attr('data-bv-feedbackicons-invalid'),\r\n                validating: this.$form.attr('data-bv-feedbackicons-validating')\r\n            },\r\n            group: this.$form.attr('data-bv-group'),\r\n            live: this.$form.attr('data-bv-live'),\r\n            message: this.$form.attr('data-bv-message'),\r\n            //错误\r\n            onError: this.$form.attr('data-bv-onerror'),\r\n            onSuccess: this.$form.attr('data-bv-onsuccess'),\r\n            //提交的按钮\r\n            submitButtons: this.$form.attr('data-bv-submitbuttons'),\r\n            threshold: this.$form.attr('data-bv-threshold'),\r\n            trigger: this.$form.attr('data-bv-trigger'),\r\n            verbose: this.$form.attr('data-bv-verbose'),\r\n            //验证的字段。\r\n            fields: {}\r\n        };\r\n\r\n        this.$form\r\n            // 禁用HTML 5中的客户端验证\r\n            .attr('novalidate', 'novalidate')\r\n            // 给表单添加了一个class '.bv-form'\r\n            .addClass(this.options.elementClass)\r\n            // 监听表单的提交事件，submit.bv 实际上就是等于 submit事件，只是这里给它加了一个命名空间.bv\r\n            .on('submit.bv', function (e) {\r\n                e.preventDefault();//首先禁用默认提交事件\r\n                that.validate();//调用验证的方法\r\n            })\r\n            //事件委托给 提交按钮 绑定一个点击事件\r\n            .on('click.bv', this.options.submitButtons, function () {\r\n\r\n                //得到 $submitButton\r\n                that.$submitButton = $(this);\r\n                // 用户点击提交按钮后，让提交有效标志设置为真\r\n                that.#submitIfValid = true;\r\n\r\n\r\n            })\r\n            // 查找具有name或data-bv-field属性的所有字段(就是每个表单元素，比如 input等、select等)\r\n            .find('[name], [data-bv-field]')\r\n            //遍历操作\r\n            .each(function () {\r\n                //得到表单字段元素的jquery对象\r\n                let $field = $(this);\r\n                //这里是得到所有的字段名称，分别从name或者data-bv-field读取\r\n                let field = $field.attr('name') || $field.attr('data-bv-field');\r\n                //调用方法，从HTML属性分析验证器选项\r\n                let opts = that.#parseOptions2($field);\r\n\r\n                if (opts) {\r\n                    //给每个表单字段元素设置data-bv-field=\"xxxx\"\r\n                    //例子<input type=\"email\" name=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\" data-bv-field=\"email\">\r\n                    $field.attr('data-bv-field', field);\r\n                    //只合并到options.fields 这个对象选项上，其它的选项是不会动的\r\n                    options.fields[field] = $.extend({}, opts, options.fields[field]);\r\n                }\r\n            });\r\n\r\n\r\n        //合并大选项(到这里已经包括了field字段，但这里仅仅是只有field)\r\n        this.options = $.extend(true, this.options, options);\r\n\r\n        console.log('这里已经合并了默认选项，和插件初始化时传递过来的所有选项')\r\n        console.log(this.options)\r\n\r\n\r\n        // 当在表单中的任何字段上按Enter键时，第一个提交按钮将完成其工作\r\n        // 然后表单将会提交\r\n        // 我创建了第一个隐藏的提交按钮\r\n        this.$hiddenButton = $('<button/>')\r\n            .attr('type', 'submit')\r\n            .prependTo(this.$form)\r\n            .addClass('bv-hidden-submit')\r\n            .css({display: 'none', width: 0, height: 0});\r\n\r\n        //再次通过事件委托的方式监听提交按钮被点击后触发事件。\r\n        this.$form\r\n            .on('click.bv', '[type=\"submit\"]', function (e) {\r\n\r\n\r\n                //e.isDefaultPrevented() 用来判断 用于检测事件是否已经调用 event.preventDefault() 阻止了默认行为。如果事件调用了 event.preventDefault() 方法，则 e.isDefaultPrevented() 返回 true，否则返回 false\r\n                // e.isDefaultPrevented() 可以用来判断是否执行了默认行为的阻止操作\r\n                // #746: 检查按钮单击处理程序是否返回false\r\n                if (!e.isDefaultPrevented()) {//没有阻止默认事件，因为如果用户自己阻止了默认提交事件，我们这里就不能强制让它手动提交了。\r\n                    // console.log('!isDefaultPrevented()')\r\n                    let $target = $(e.target);\r\n                    // 按钮可能包含HTML标记，比如按钮内部或者外部有其它的html包裹，所以需要我们判断一下。\r\n                    let $button = $target.is('[type=\"submit\"]') ? $target.eq(0) : $target.parent('[type=\"submit\"]').eq(0);\r\n\r\n                    // 单击提交按钮/输入时不执行验证\r\n                    // 判断该按钮不是submitButtons定义的且也不是我们自己生成的hiddenButton\r\n                    if (that.options.submitButtons && !$button.is(that.options.submitButtons) && !$button.is(that.$hiddenButton)) {\r\n                        that.$form.off('submit.bv').submit();//模拟表单提交然后移除掉自定义绑定的事件\r\n                    }\r\n                }\r\n            });\r\n\r\n        //循环初始化每个字段\r\n        for (const field in this.options.fields) {\r\n            //初始化字段\r\n            this.#initField(field);\r\n        }\r\n\r\n        //触发表单初始化完成事件\r\n        // console.log(this.options.events.formInit)\r\n        this.$form.trigger($.Event(this.options.events.formInit), {\r\n            bv: this,\r\n            options: this.options\r\n        });\r\n\r\n        // 准备事件\r\n        if (this.options.onSuccess) {\r\n            this.$form.on(this.options.events.formSuccess, function (e) {\r\n                Utils.call(that.options.onSuccess, [e]);\r\n            });\r\n        }\r\n        if (this.options.onError) {\r\n            this.$form.on(this.options.events.formError, function (e) {\r\n                Utils.call(that.options.onError, [e]);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 从HTML属性分析验证器选项\r\n     *\r\n     * @param {jQuery} $field 字段元素\r\n     * @returns {Object}\r\n     */\r\n    #parseOptions2($field) {\r\n        const field = $field.attr('name') || $field.attr('data-bv-field');\r\n        let validators = {};\r\n        let validator;\r\n\r\n        for (const v in $.fn.bootstrapValidation.validators) {\r\n            validator = $.fn.bootstrapValidation.validators[v];\r\n            const attrName = `data-bv-${v.toLowerCase()}`;\r\n            let enabled = $field.attr(attrName) + '';\r\n            const html5AttrMap = typeof validator.enableByHtml5 === 'function' ? validator.enableByHtml5($field) : null;\r\n\r\n            if ((html5AttrMap && enabled !== 'false') || (html5AttrMap !== true && (enabled === '' || enabled === 'true' || attrName === enabled.toLowerCase()))) {\r\n                validator.html5Attributes = {\r\n                    message: 'message',\r\n                    onerror: 'onError',\r\n                    onsuccess: 'onSuccess'\r\n                };\r\n                validators[v] = html5AttrMap === true ? {} : html5AttrMap;\r\n\r\n                for (const html5AttrName in validator.html5Attributes) {\r\n                    const optionName = validator.html5Attributes[html5AttrName];\r\n                    const optionAttrName = `data-bv-${v.toLowerCase()}-${html5AttrName}`;\r\n                    const optionValue = $field.attr(optionAttrName);\r\n\r\n                    if (optionValue) {\r\n                        validators[v][optionName] = optionValue === 'true' || optionAttrName === optionValue.toLowerCase();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const opts = {\r\n            autoFocus: $field.attr('data-bv-autofocus'),\r\n            container: $field.attr('data-bv-container'),\r\n            excluded: $field.attr('data-bv-excluded'),\r\n            feedbackIcons: $field.attr('data-bv-feedbackicons'),\r\n            group: $field.attr('data-bv-group'),\r\n            message: $field.attr('data-bv-message'),\r\n            onError: $field.attr('data-bv-onerror'),\r\n            onStatus: $field.attr('data-bv-onstatus'),\r\n            onSuccess: $field.attr('data-bv-onsuccess'),\r\n            selector: $field.attr('data-bv-selector'),\r\n            threshold: $field.attr('data-bv-threshold'),\r\n            trigger: $field.attr('data-bv-trigger'),\r\n            verbose: $field.attr('data-bv-verbose'),\r\n            validators\r\n        };\r\n\r\n        const emptyOptions = $.isEmptyObject(opts);\r\n        const emptyValidators = $.isEmptyObject(validators);\r\n\r\n        if (!emptyValidators || (!emptyOptions && this.options.fields && this.options.fields[field])) {\r\n            opts.validators = validators;\r\n\r\n            return opts;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Init字段\r\n     *\r\n     * @param {String|jQuery} field 字段名称或字段元素\r\n     */\r\n    #initField(field) {\r\n        //创建一个空的 jQuery 集合，用于存储和管理元素\r\n        let fields = $([]);\r\n\r\n        // console.log(fields)\r\n\r\n        // console.log(typeof field)\r\n        switch (typeof field) {\r\n            case 'object': //如果传递过来的直接是一个字段元素就直接给fields赋值\r\n                fields = field;\r\n                field = field.attr('data-bv-field');\r\n                break;\r\n            case 'string':\r\n                //根据字段名称或者字段元素,并赋值给上面定义的 fields\r\n                fields = this.getFieldElements(field);\r\n                // console.log(fields)\r\n                // console.log(fields);\r\n                fields.attr('data-bv-field', field);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // 我们不需要验证不存在的字段\r\n        if (fields.length === 0 || this.options.fields[field] === null || this.options.fields[field].validators === null) {\r\n            return;\r\n        }\r\n\r\n\r\n        //$.fn.bootstrapValidatio.validators :这里是取对象上所有已经被注册的验证器对象集合\r\n        // console.log($.fn.bootstrapValidatio.validators)\r\n        //Object.keys(this.options.fields[field].validators) 得到的是对象的key值组成的数组，这里得到的是验证器名称数组\r\n        // 这里的作用是把传递进来的每个字段的验证器过滤一下，只保留bootstrapValidator.validators上真正存在的验证器\r\n        Object.keys(this.options.fields[field].validators).forEach(validatorName => {\r\n            if (!$.fn.bootstrapValidation.validators[validatorName]) {\r\n                delete this.options.fields[field].validators[validatorName];\r\n            }\r\n        });\r\n\r\n\r\n        //this.options.fields[field].enabled 可是这里会等于undefined,估计是作者的bug\r\n        if (this.options.fields[field].enabled === null) {//判断每个字段上对象上的enabled是否等于null，等于null则设定为true\r\n            console.log('into');\r\n            this.options.fields[field].enabled = true;\r\n        }\r\n\r\n\r\n        let that = this;\r\n\r\n        //字段元素的长度\r\n        let total = fields.length;\r\n\r\n\r\n        //获取类型，可能是 text radio checkbox\r\n        let type = fields.attr('type');\r\n\r\n\r\n        // 判断字段元素类型为radio或者checkbox\r\n        let updateAll = (total === 1) || ('radio' === type) || ('checkbox' === type);//这里目前是永远都等于true\r\n\r\n\r\n        // 事件类型判断，如果是字段元素是 radio checkbox file SELECT 则用change事件，否则就调用 this.#changeEvent\r\n        let event = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === fields.eq(0).get(0).tagName) ? 'change' : this.#changeEvent;\r\n        //得到字段上的 trigger字符串数组 ,['input']\r\n        let trigger = (this.options.fields[field].trigger || this.options.trigger || event).split(' ');\r\n        // console.log(trigger)\r\n\r\n        // 得到 'input.update.bv'\r\n        let events = $.map(trigger, function (item) {\r\n            return item + '.update.bv';\r\n        }).join(' ');\r\n\r\n\r\n        fields.each((index, fieldElement) => {\r\n\r\n            let $field = $(fieldElement);\r\n\r\n\r\n            // 字段元素容器选择器\r\n            let group = this.options.fields[field].group || this.options.group;\r\n            // 字段元素容器jq对象\r\n            let $parent = $field.parents(group);\r\n\r\n            // 允许用户指示错误消息的显示位置,email: {container:'#errors',...}\r\n            let container = ('function' === typeof (this.options.fields[field].container || this.options.container)) ? (this.options.fields[field].container || this.options.container).call(this, $field, this) : (this.options.fields[field].container || this.options.container);\r\n\r\n\r\n            // 得到错误消息容器Jq对象\r\n            let $message = (container && container !== 'tooltip' && container !== 'popover') ? $(container) : this.#getMessageContainer($field, group);\r\n\r\n            //给它加上一个.has-error 类  来自https://getbootstrap.com/docs/3.4/css/#forms\r\n            if (container && container !== 'tooltip' && container !== 'popover') {\r\n                $message.addClass('has-error');\r\n            }\r\n\r\n            // 删除所有错误消息和反馈图标\r\n            $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove();\r\n            $parent.find('i[data-bv-icon-for=\"' + field + '\"]').remove();\r\n\r\n            // 每当用户更改字段值时，将其标记为尚未验证(比如手动修改input的内容时)\r\n            $field.off(events).on(events, function () {\r\n                console.log('input被输入了触发 |' + events + '|that.updateStatus($(this), that.STATUS_NOT_VALIDATED)')\r\n                that.updateStatus($(this), that.STATUS_NOT_VALIDATED);\r\n            });\r\n\r\n            // 创建用于显示错误消息的帮助块元素\r\n            $field.data('bv.messages', $message);\r\n\r\n            Object.keys(this.options.fields[field].validators).forEach(validatorName => {\r\n                $field.data('bv.result.' + validatorName, this.STATUS_NOT_VALIDATED);\r\n\r\n                if (!updateAll || index === total - 1) {\r\n                    $('<small/>')\r\n                        .css('display', 'none')\r\n                        .addClass('help-block')\r\n                        .attr('data-bv-validator', validatorName)\r\n                        .attr('data-bv-for', field)\r\n                        .attr('data-bv-result', this.STATUS_NOT_VALIDATED)\r\n                        .html(this.#getMessage(field, validatorName))\r\n                        .appendTo($message);\r\n                }\r\n\r\n\r\n                // 初始化验证器,当验证器有init方法的时候，调用init方法\r\n                if ('function' === typeof $.fn.bootstrapValidation.validators[validatorName].init) {\r\n                    $.fn.bootstrapValidation.validators[validatorName].init(this, $field, this.options.fields[field].validators[validatorName]);\r\n                }\r\n            });\r\n\r\n\r\n            // 准备反馈图标\r\n            // 可以从Bootstrap3.1获取 (http://getbootstrap.com/css/#forms-control-validation)\r\n            if (this.options.fields[field].feedbackIcons !== false && this.options.fields[field].feedbackIcons !== 'false'\r\n                && this.options.feedbackIcons\r\n                && this.options.feedbackIcons.validating && this.options.feedbackIcons.invalid && this.options.feedbackIcons.valid\r\n                && (!updateAll || index === total - 1)) {\r\n                // $parent.removeClass('has-success').removeClass('has-error').addClass('has-feedback');\r\n                // 保留从后端填充的错误消息\r\n                $parent.addClass('has-feedback'); //字段元素容器，再添加一个类 https://getbootstrap.com/docs/3.4/css/#forms\r\n\r\n                //在字段元素后面插入这个反馈图标容器 i元素\r\n                let $icon = $('<i/>')\r\n                    .css('display', 'none')\r\n                    .addClass('form-control-feedback')\r\n                    .attr('data-bv-icon-for', field)\r\n                    .insertAfter($field);\r\n\r\n                // 对于复选框和单选框的错误图标要特殊处理\r\n                if ('checkbox' === type || 'radio' === type) {\r\n\r\n                    //这里得到的是label标签\r\n                    let $fieldParent = $field.parent();\r\n\r\n                    if ($fieldParent.hasClass(type)) {//如果有类 比如 class=\"checkbox\"\r\n                        $icon.insertAfter($fieldParent); //直接在后面插入\r\n                    } else if ($fieldParent.parent().hasClass(type)) {//否则判断父类的父类是否有 比如 class=\"checkbox\"\r\n                        $icon.insertAfter($fieldParent.parent());//有的话插入到父类的父类的后面。\r\n                    }\r\n                }\r\n\r\n                // 如果没有标签，反馈图标将无法正确渲染\r\n                // https://github.com/twbs/bootstrap/issues/12873\r\n                if ($parent.find('label').length === 0) {\r\n                    $icon.addClass('bv-no-label');\r\n                }\r\n                // 如果是输入框组的话 反馈图标还要再特殊处理\r\n                if ($parent.find('.input-group').length !== 0) {\r\n                    $icon.addClass('bv-icon-input-group')\r\n                        .insertAfter($parent.find('.input-group').eq(0));\r\n                }\r\n\r\n                // console.log(updateAll);\r\n\r\n                // 将图标存储为字段元素的数据\r\n                if (!updateAll) {//不是单选或者复选\r\n                    console.log($field)\r\n                    $field.data('bv.icon', $icon);\r\n                } else if (index === total - 1) { //目前只会走这里 下面还有公共api，等等看看会不会走上面\r\n                    // 具有相同名称的所有字段都具有相同的图标\r\n                    fields.data('bv.icon', $icon);\r\n                }\r\n\r\n                if (container) {//如果有传递错误消息容器\r\n                    $field\r\n                        // 当字段获得焦点时显示工具提示/弹出消息\r\n                        .off('focus.container.bv')\r\n                        .on('focus.container.bv', function () {\r\n                            console.log(container)\r\n                            switch (container) {//根据错误消息容器，判断是那一种\r\n                                case 'tooltip':\r\n                                    $(this).data('bv.icon').tooltip('show');\r\n                                    break;\r\n                                case 'popover':\r\n                                    $(this).data('bv.icon').popover('show');\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        })\r\n                        // 并在失去焦点时隐藏它们\r\n                        .off('blur.container.bv')\r\n                        .on('blur.container.bv', function () {\r\n                            switch (container) {\r\n                                case 'tooltip':\r\n                                    $(this).data('bv.icon').tooltip('hide');\r\n                                    break;\r\n                                case 'popover':\r\n                                    $(this).data('bv.icon').popover('hide');\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        });\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n        // 准备事件\r\n        fields\r\n            .on(this.options.events.fieldSuccess, function (e, data) {\r\n                let onSuccess = that.getOptions(data.field, null, 'onSuccess');\r\n                if (onSuccess) {\r\n\r\n                    Utils.call(onSuccess, [e, data]);\r\n                }\r\n            })\r\n            .on(this.options.events.fieldError, function (e, data) {\r\n                let onError = that.getOptions(data.field, null, 'onError');\r\n                if (onError) {\r\n                    Utils.call(onError, [e, data]);\r\n                }\r\n            })\r\n            .on(this.options.events.fieldStatus, function (e, data) {\r\n                let onStatus = that.getOptions(data.field, null, 'onStatus');\r\n                if (onStatus) {\r\n                    Utils.call(onStatus, [e, data]);\r\n                }\r\n            })\r\n            .on(this.options.events.validatorError, function (e, data) {\r\n                let onError = that.getOptions(data.field, data.validator, 'onError');\r\n                if (onError) {\r\n                    Utils.call(onError, [e, data]);\r\n                }\r\n            })\r\n            .on(this.options.events.validatorSuccess, function (e, data) {\r\n                let onSuccess = that.getOptions(data.field, data.validator, 'onSuccess');\r\n                if (onSuccess) {\r\n                    Utils.call(onSuccess, [e, data]);\r\n                }\r\n            });\r\n\r\n        // 设置实时模式\r\n        events = $.map(trigger, function (item) {\r\n            return item + '.live.bv';\r\n        }).join(' ');\r\n\r\n        // console.log(events)\r\n\r\n        switch (this.options.live) {//判断验证模式\r\n            case 'submitted':\r\n                break;\r\n            case 'disabled':\r\n                fields.off(events);\r\n                break;\r\n            case 'enabled':\r\n            /* falls through */\r\n            default:\r\n                // console.log(fields)\r\n                fields.off(events).on(events, function () {\r\n                    if (that.#exceedThreshold($(this))) { //检测是否超过阈值\r\n                        that.validateField($(this));\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n\r\n        fields.trigger($.Event(this.options.events.fieldInit), {\r\n            bv: this,\r\n            field: field,\r\n            element: fields\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取用于放置错误消息的元素\r\n     *\r\n     * @param {jQuery} $field 字段元素\r\n     * @param {String} group\r\n     * @returns {jQuery}\r\n     */\r\n    #getMessageContainer($field, group) {\r\n        let $parent = $field.parent();\r\n        if ($parent.is(group)) {\r\n            return $parent;\r\n        }\r\n\r\n        let cssClasses = $parent.attr('class');\r\n        if (!cssClasses) {\r\n            return this.#getMessageContainer($parent, group);\r\n        }\r\n\r\n        cssClasses = cssClasses.split(' ');\r\n        let n = cssClasses.length;\r\n        for (let i = 0; i < n; i++) {\r\n            if (/^col-(xs|sm|md|lg)-\\d+$/.test(cssClasses[i]) || /^col-(xs|sm|md|lg)-offset-\\d+$/.test(cssClasses[i])) {\r\n                return $parent;\r\n            }\r\n        }\r\n\r\n        return this.#getMessageContainer($parent, group);\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取给定字段和验证器的错误消息\r\n     *\r\n     * @param {String} field 字段名\r\n     * @param {String} validatorName validator名称\r\n     * @returns {String}\r\n     */\r\n    #getMessage(field, validatorName) {\r\n        if (!this.options.fields[field] || !$.fn.bootstrapValidation.validators[validatorName]\r\n            || !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName]) {\r\n            return '';\r\n        }\r\n\r\n        let options = this.options.fields[field].validators[validatorName];\r\n        switch (true) {\r\n            case (!!options.message):\r\n                return options.message;\r\n            case (!!this.options.fields[field].message):\r\n                return this.options.fields[field].message;\r\n            case (!!$.fn.bootstrapValidation.i18n[validatorName]):\r\n                return $.fn.bootstrapValidation.i18n[validatorName]['default'];\r\n            default:\r\n                return this.options.message;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 检查该字段是否已排除。\r\n     * 返回true表示该字段将不被验证\r\n     *\r\n     * @param {jQuery} $field 字段元素\r\n     * @returns {Boolean}\r\n     */\r\n    #isExcluded($field) {\r\n        let excludedAttr = $field.attr('data-bv-excluded'),\r\n            // I still need to check the 'name' attribute while initializing the field\r\n            field = $field.attr('data-bv-field') || $field.attr('name');\r\n\r\n        switch (true) {\r\n            case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true)):\r\n            case (excludedAttr === 'true'):\r\n            case (excludedAttr === ''):\r\n                return true;\r\n\r\n            case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false)):\r\n            case (excludedAttr === 'false'):\r\n                return false;\r\n\r\n            default:\r\n                if (this.options.excluded) {\r\n                    // Convert to array first\r\n                    if ('string' === typeof this.options.excluded) {\r\n                        this.options.excluded = $.map(this.options.excluded.split(','), function (item) {\r\n                            // Trim the spaces\r\n                            return $.trim(item);\r\n                        });\r\n                    }\r\n\r\n                    let length = this.options.excluded.length;\r\n                    for (let i = 0; i < length; i++) {\r\n                        if (('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))\r\n                            || ('function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 在验证字段元素后调用\r\n     *\r\n     * @param {jQuery} $field 字段元素\r\n     * @param {String} [validatorName] 验证其名称\r\n     */\r\n    #onFieldValidated($field, validatorName) {\r\n        let field = $field.attr('data-bv-field'),\r\n            validators = this.options.fields[field].validators,\r\n            counter = {},\r\n            numValidators = 0,\r\n            data = {\r\n                bv: this,\r\n                field: field,\r\n                element: $field,\r\n                validator: validatorName,\r\n                result: $field.data('bv.response.' + validatorName)\r\n            };\r\n\r\n        // Trigger an event after given validator completes\r\n        if (validatorName) {\r\n            switch ($field.data('bv.result.' + validatorName)) {\r\n                case this.STATUS_INVALID:\r\n                    $field.trigger($.Event(this.options.events.validatorError), data);\r\n                    break;\r\n                case this.STATUS_VALID:\r\n                    $field.trigger($.Event(this.options.events.validatorSuccess), data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        counter[this.STATUS_NOT_VALIDATED] = 0;\r\n        counter[this.STATUS_VALIDATING] = 0;\r\n        counter[this.STATUS_INVALID] = 0;\r\n        counter[this.STATUS_VALID] = 0;\r\n\r\n        for (let v in validators) {\r\n            if (validators[v].enabled === false) {\r\n                continue;\r\n            }\r\n\r\n            numValidators++;\r\n            let result = $field.data('bv.result.' + v);\r\n            if (result) {\r\n                counter[result]++;\r\n            }\r\n        }\r\n\r\n        if (counter[this.STATUS_VALID] === numValidators) {\r\n            // Remove from the list of invalid fields\r\n            this.$invalidFields = this.$invalidFields.not($field);\r\n\r\n            $field.trigger($.Event(this.options.events.fieldSuccess), data);\r\n        }\r\n        // If all validators are completed and there is at least one validator which doesn't pass\r\n        else if ((counter[this.STATUS_NOT_VALIDATED] === 0 || !this.#isOptionEnabled(field, 'verbose')) && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {\r\n            // Add to the list of invalid fields\r\n            this.$invalidFields = this.$invalidFields.add($field);\r\n\r\n            $field.trigger($.Event(this.options.events.fieldError), data);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 检查字段选项是否已启用\r\n     *\r\n     * @param {String} field The field name\r\n     * @param {String} option The option name, \"verbose\", \"autoFocus\", for example\r\n     * @returns {Boolean}\r\n     */\r\n    #isOptionEnabled(field, option) {\r\n        if (this.options.fields[field] && (this.options.fields[field][option] === 'true' || this.options.fields[field][option] === true)) {\r\n            return true;\r\n        }\r\n        if (this.options.fields[field] && (this.options.fields[field][option] === 'false' || this.options.fields[field][option] === false)) {\r\n            return false;\r\n        }\r\n        return this.options[option] === 'true' || this.options[option] === true;\r\n    }\r\n\r\n\r\n    /**\r\n     * 检查字段值的字符数是否超过阈值\r\n     *\r\n     * @param {jQuery} $field 字段元素\r\n     * @returns {Boolean}\r\n     */\r\n    #exceedThreshold($field) {\r\n        let field = $field.attr('data-bv-field'),\r\n            threshold = this.options.fields[field].threshold || this.options.threshold;\r\n        if (!threshold) {\r\n            return true;\r\n        }\r\n        let cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;\r\n        return (cannotType || $field.val().length >= threshold);\r\n    }\r\n\r\n\r\n    /**\r\n     * 按给定名称检索字段元素\r\n     *\r\n     * @param {String} field 字段名称\r\n     * @returns {null|jQuery[]}\r\n     */\r\n    getFieldElements(field) {\r\n        if (!this.#cacheFields[field]) {\r\n            this.#cacheFields[field] = (this.options.fields[field] && this.options.fields[field].selector)\r\n                ? $(this.options.fields[field].selector)\r\n                : this.$form.find('[name=\"' + field + '\"]');\r\n        }\r\n        return this.#cacheFields[field];\r\n    }\r\n\r\n\r\n    /**\r\n     * 更新字段的所有验证结果\r\n     *\r\n     * @param {String|jQuery} field 字段名称或字段元素\r\n     * @param {String} status 状态。可以是“NOT_VALIDATED”、“VALIDATION”、“INVALID”或“VALID”\r\n     * @param {String} [validatorName] 验证器名称。如果为null，该方法将更新所有验证器的有效性结果\r\n     * @returns {BootstrapValidator}\r\n     */\r\n    updateStatus(field, status, validatorName) {\r\n        // console.log(field)\r\n\r\n        let fields = $([]);\r\n\r\n        // console.log(typeof field)\r\n        switch (typeof field) {\r\n            case 'object':\r\n                fields = field;\r\n                field = field.attr('data-bv-field');\r\n                break;\r\n            case 'string':\r\n                fields = this.getFieldElements(field);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (status === this.STATUS_NOT_VALIDATED) {//如果传递进来的状态是无验证的。\r\n            // 重置标志\r\n            // 当延迟验证器在键入时返回true时，防止表单进行提交\r\n            this.#submitIfValid = false;\r\n        }\r\n\r\n        //重新接受当前实例\r\n        let that = this;\r\n        //类型\r\n\r\n        // console.log(fields)\r\n        let type = fields.attr('type');\r\n        // console.log(type)\r\n        let group = this.options.fields[field].group || this.options.group;\r\n        //如果是单选框或者多选框则长度为1，否则就取字段的长度。\r\n        let total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\r\n\r\n        // console.log(total)\r\n\r\n        for (let i = 0; i < total; i++) {\r\n            let $field = fields.eq(i);\r\n\r\n\r\n            if (this.#isExcluded($field)) {//判断是否被排除的字段，如果是排除的字段，直接逃过这次循环。\r\n                continue;\r\n            }\r\n\r\n            let $parent = $field.parents(group);\r\n            let $message = $field.data('bv.messages');\r\n\r\n            //直接通过属性选择器找到所有的错误信息包裹small\r\n            let $allErrors = $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]');\r\n\r\n            //错误信息，判断验证器是否有传入，如果有传入则\r\n            let $errors = validatorName ? $allErrors.filter('[data-bv-validator=\"' + validatorName + '\"]') : $allErrors;\r\n\r\n\r\n            let $icon = $field.data('bv.icon');\r\n            let container = ('function' === typeof (this.options.fields[field].container || this.options.container)) ? (this.options.fields[field].container || this.options.container).call(this, $field, this) : (this.options.fields[field].container || this.options.container);\r\n            let isValidField = null;\r\n\r\n            // 更新状态\r\n            if (validatorName) {//如果有验证器名称，就直接更新这一个\r\n                $field.data('bv.result.' + validatorName, status);\r\n            } else {//否则更新所有的。\r\n\r\n                for (let v in this.options.fields[field].validators) {\r\n                    $field.data('bv.result.' + v, status);\r\n                }\r\n            }\r\n\r\n            // 显示/隐藏错误元素和反馈图标\r\n            $errors.attr('data-bv-result', status);\r\n\r\n            // 确定包含元素的选项卡\r\n            let $tabPane = $field.parents('.tab-pane');\r\n            let tabId;\r\n            let $tab;\r\n            if ($tabPane && (tabId = $tabPane.attr('id'))) {\r\n                $tab = $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').parent();\r\n            }\r\n\r\n            switch (status) {\r\n                case this.STATUS_VALIDATING://如果是正在验证的状态\r\n                    isValidField = null;//清空验证字段\r\n                    //禁用提交按钮\r\n                    this.disableSubmitButtons(true);\r\n                    $parent.removeClass('has-success').removeClass('has-error');//移除成功或者错误的类\r\n                    if ($icon) {//移除成功和失败的图标，添加一个正在验证的类，并让这个icon显示\r\n                        $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).addClass(this.options.feedbackIcons.validating).show();\r\n                    }\r\n                    if ($tab) {//如果tab存在\r\n                        //移除所有的tab成功的类和tab失败的类\r\n                        $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\r\n                    }\r\n                    break;\r\n\r\n                case this.STATUS_INVALID://如果是验证失败的。\r\n                    isValidField = false;//是否验证的改成状态为false\r\n\r\n                    //禁用提交按钮\r\n                    this.disableSubmitButtons(true);\r\n                    $parent.removeClass('has-success').addClass('has-error');//移除成功或者错误的类\r\n                    if ($icon) {//移除成功和失败的图标，添加一个正在验证的类，并让这个icon显示\r\n                        $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.validating).addClass(this.options.feedbackIcons.invalid).show();\r\n                    }\r\n                    if ($tab) {//移除所有的tab成功的类和tab失败的类\r\n                        $tab.removeClass('bv-tab-success').addClass('bv-tab-error');\r\n                    }\r\n                    break;\r\n\r\n                case this.STATUS_VALID:\r\n                    // 如果字段有效（通过所有验证器）\r\n                    isValidField = ($allErrors.filter('[data-bv-result=\"' + this.STATUS_NOT_VALIDATED + '\"]').length === 0)\r\n                        ? ($allErrors.filter('[data-bv-result=\"' + this.STATUS_VALID + '\"]').length === $allErrors.length)  // 所有验证器已完成\r\n                        : null;                                                                                            // 有些验证器还没有完成\r\n                    if (isValidField !== null) {\r\n                        this.disableSubmitButtons(this.$submitButton ? !this.isValid() : !isValidField);\r\n                        if ($icon) {\r\n                            $icon\r\n                                .removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).removeClass(this.options.feedbackIcons.valid)\r\n                                .addClass(isValidField ? this.options.feedbackIcons.valid : this.options.feedbackIcons.invalid)\r\n                                .show();\r\n                        }\r\n                    }\r\n\r\n                    $parent.removeClass('has-error has-success').addClass(this.isValidContainer($parent) ? 'has-success' : 'has-error');\r\n                    if ($tab) {\r\n                        $tab.removeClass('bv-tab-success').removeClass('bv-tab-error').addClass(this.isValidContainer($tabPane) ? 'bv-tab-success' : 'bv-tab-error');\r\n                    }\r\n                    break;\r\n\r\n                case this.STATUS_NOT_VALIDATED:\r\n                /* falls through */\r\n                default:\r\n                    isValidField = null;\r\n                    this.disableSubmitButtons(false);\r\n                    $parent.removeClass('has-success').removeClass('has-error');\r\n                    if ($icon) {\r\n                        $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).hide();\r\n                    }\r\n                    if ($tab) {\r\n                        $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            switch (true) {\r\n                // Only show the first error message if it is placed inside a tooltip ...\r\n                case ($icon && 'tooltip' === container):\r\n                    (isValidField === false)\r\n                        ? $icon.css('cursor', 'pointer').tooltip('destroy').tooltip({\r\n                            container: 'body',\r\n                            html: true,\r\n                            placement: 'auto top',\r\n                            title: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html()\r\n                        })\r\n                        : $icon.css('cursor', '').tooltip('destroy');\r\n                    break;\r\n                // ... or popover\r\n                case ($icon && 'popover' === container):\r\n                    (isValidField === false)\r\n                        ? $icon.css('cursor', 'pointer').popover('destroy').popover({\r\n                            container: 'body',\r\n                            content: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html(),\r\n                            html: true,\r\n                            placement: 'auto top',\r\n                            trigger: 'hover click'\r\n                        })\r\n                        : $icon.css('cursor', '').popover('destroy');\r\n                    break;\r\n                default:\r\n                    (status === this.STATUS_INVALID) ? $errors.show() : $errors.hide();\r\n                    break;\r\n            }\r\n\r\n            // Trigger an event\r\n            $field.trigger($.Event(this.options.events.fieldStatus), {\r\n                bv: this,\r\n                field: field,\r\n                element: $field,\r\n                status: status\r\n            });\r\n            this.#onFieldValidated($field, validatorName);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 禁用/启用提交按钮\r\n     *\r\n     * @param {Boolean} disabled 可以是真的也可以是假的\r\n     * @returns {BootstrapValidator}\r\n     */\r\n    disableSubmitButtons(disabled) {\r\n        if (!disabled) {\r\n            this.$form.find(this.options.submitButtons).removeAttr('disabled');\r\n        } else if (this.options.live !== 'disabled') {\r\n            // Don't disable if the live validating mode is disabled\r\n            this.$form.find(this.options.submitButtons).attr('disabled', 'disabled');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取字段选项\r\n     *\r\n     * @param {String|jQuery} [field] 字段名称或字段元素。如果未设置，该方法将返回表单选项\r\n     * @param {String} [validator] 验证器的名称。如果为null，则该方法返回表单选项\r\n     * @param {String} [option] 选项名称\r\n     * @return {String|Object}\r\n     */\r\n    getOptions(field, validator, option) {\r\n        if (!field) {\r\n            return option ? this.options[option] : this.options;\r\n        }\r\n        if ('object' === typeof field) {\r\n            field = field.attr('data-bv-field');\r\n        }\r\n        if (!this.options.fields[field]) {\r\n            return null;\r\n        }\r\n\r\n        let options = this.options.fields[field];\r\n        if (!validator) {\r\n            return option ? options[option] : options;\r\n        }\r\n        if (!options.validators || !options.validators[validator]) {\r\n            return null;\r\n        }\r\n\r\n        return option ? options.validators[validator][option] : options.validators[validator];\r\n    }\r\n\r\n\r\n    /**\r\n     * 验证给定字段\r\n     *\r\n     * @param {String|jQuery} field 字段名称或字段元素\r\n     * @returns {BootstrapValidator}\r\n     */\r\n    validateField(field) {\r\n        let fields = $([]);\r\n        switch (typeof field) {\r\n            case 'object':\r\n                fields = field;\r\n                field = field.attr('data-bv-field');\r\n                break;\r\n            case 'string':\r\n                fields = this.getFieldElements(field);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {\r\n            return this;\r\n        }\r\n\r\n        let that = this,\r\n            type = fields.attr('type'),\r\n            total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n            updateAll = ('radio' === type || 'checkbox' === type),\r\n            validators = this.options.fields[field].validators,\r\n            verbose = this.#isOptionEnabled(field, 'verbose'),\r\n            validatorName,\r\n            validateResult;\r\n\r\n        for (let i = 0; i < total; i++) {\r\n            let $field = fields.eq(i);\r\n            if (this.#isExcluded($field)) {\r\n                continue;\r\n            }\r\n\r\n            let stop = false;\r\n            for (validatorName in validators) {\r\n                if ($field.data('bv.dfs.' + validatorName)) {\r\n                    $field.data('bv.dfs.' + validatorName).reject();\r\n                }\r\n                if (stop) {\r\n                    break;\r\n                }\r\n\r\n                // Don't validate field if it is already done\r\n                let result = $field.data('bv.result.' + validatorName);\r\n                if (result === this.STATUS_VALID || result === this.STATUS_INVALID) {\r\n                    this.#onFieldValidated($field, validatorName);\r\n                    continue;\r\n                } else if (validators[validatorName].enabled === false) {\r\n                    this.updateStatus(updateAll ? field : $field, this.STATUS_VALID, validatorName);\r\n                    continue;\r\n                }\r\n\r\n                $field.data('bv.result.' + validatorName, this.STATUS_VALIDATING);\r\n                validateResult = $.fn.bootstrapValidation.validators[validatorName].validate(this, $field, validators[validatorName]);\r\n\r\n                // validateResult can be a $.Deferred object ...\r\n                if ('object' === typeof validateResult && validateResult.resolve) {\r\n                    this.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);\r\n                    $field.data('bv.dfs.' + validatorName, validateResult);\r\n\r\n                    validateResult.done(function ($f, v, response) {\r\n                        // v is validator name\r\n                        $f.removeData('bv.dfs.' + v).data('bv.response.' + v, response);\r\n                        if (response.message) {\r\n                            that.updateMessage($f, v, response.message);\r\n                        }\r\n\r\n                        that.updateStatus(updateAll ? $f.attr('data-bv-field') : $f, response.valid ? that.STATUS_VALID : that.STATUS_INVALID, v);\r\n\r\n                        if (response.valid && that.#submitIfValid === true) {\r\n                            // If a remote validator returns true and the form is ready to submit, then do it\r\n                            that._submit();\r\n                        } else if (!response.valid && !verbose) {\r\n                            stop = true;\r\n                        }\r\n                    });\r\n                }\r\n                // ... or object { valid: true/false, message: 'dynamic message' }\r\n                else if ('object' === typeof validateResult && validateResult.valid !== undefined && validateResult.message !== undefined) {\r\n                    $field.data('bv.response.' + validatorName, validateResult);\r\n                    this.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);\r\n                    this.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n                    if (!validateResult.valid && !verbose) {\r\n                        break;\r\n                    }\r\n                }\r\n                // ... or a boolean value\r\n                else if ('boolean' === typeof validateResult) {\r\n                    $field.data('bv.response.' + validatorName, validateResult);\r\n                    this.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\r\n                    if (!validateResult && !verbose) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 检查给定容器中的所有字段是否有效。\r\n     * 当使用诸如选项卡、折叠之类的向导时，它很有用\r\n     *\r\n     * @param {String|jQuery} container 容器选择器或元素\r\n     * @returns {Boolean}\r\n     */\r\n    isValidContainer(container) {\r\n        let that = this,\r\n            map = {},\r\n            $container = ('string' === typeof container) ? $(container) : container;\r\n        if ($container.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        $container.find('[data-bv-field]').each(function () {\r\n            let $field = $(this),\r\n                field = $field.attr('data-bv-field');\r\n            if (!that.#isExcluded($field) && !map[field]) {\r\n                map[field] = $field;\r\n            }\r\n        });\r\n\r\n        for (let field in map) {\r\n            let $f = map[field];\r\n            if ($f.data('bv.messages')\r\n                .find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]')\r\n                .filter('[data-bv-result=\"' + this.STATUS_INVALID + '\"]')\r\n                .length > 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * 更新错误消息\r\n     *\r\n     * @param {String|jQuery} field 字段名称或字段元素\r\n     * @param {String} validator 验证器名称\r\n     * @param {String} message 消息\r\n     * @returns {BootstrapValidator}\r\n     */\r\n    updateMessage(field, validator, message) {\r\n        let $fields = $([]);\r\n        switch (typeof field) {\r\n            case 'object':\r\n                $fields = field;\r\n                field = field.attr('data-bv-field');\r\n                break;\r\n            case 'string':\r\n                $fields = this.getFieldElements(field);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        $fields.each(function () {\r\n            $(this).data('bv.messages').find('.help-block[data-bv-validator=\"' + validator + '\"][data-bv-for=\"' + field + '\"]').html(message);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 验证表单\r\n     *\r\n     * @returns {BootstrapValidator}\r\n     */\r\n    validate() {\r\n        if (!this.options.fields) {\r\n            return this;\r\n        }\r\n        this.disableSubmitButtons(true);\r\n\r\n        this.#submitIfValid = false;\r\n        for (let field in this.options.fields) {\r\n            this.validateField(field);\r\n        }\r\n\r\n        this._submit();\r\n        this.#submitIfValid = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 在完成所有验证时调用\r\n     */\r\n    _submit() {\r\n        let isValid = this.isValid(),\r\n            eventType = isValid ? this.options.events.formSuccess : this.options.events.formError,\r\n            e = $.Event(eventType);\r\n\r\n        this.$form.trigger(e);\r\n\r\n        // Call default handler\r\n        // Check if whether the submit button is clicked\r\n        if (this.$submitButton) {\r\n            isValid ? this.#onSuccess(e) : this.#onError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查表格有效性\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    isValid() {\r\n        for (let field in this.options.fields) {\r\n            if (!this.isValidField(field)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 检查字段是否有效\r\n     *\r\n     * @param {String|jQuery} field 字段名称或字段元素\r\n     * @returns {Boolean}\r\n     */\r\n    isValidField(field) {\r\n        let fields = $([]);\r\n        switch (typeof field) {\r\n            case 'object':\r\n                fields = field;\r\n                field = field.attr('data-bv-field');\r\n                break;\r\n            case 'string':\r\n                fields = this.getFieldElements(field);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {\r\n            return true;\r\n        }\r\n\r\n        let type = fields.attr('type'),\r\n            total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\r\n            $field, validatorName, status;\r\n        for (let i = 0; i < total; i++) {\r\n            $field = fields.eq(i);\r\n            if (this.#isExcluded($field)) {\r\n                continue;\r\n            }\r\n            for (validatorName in this.options.fields[field].validators) {\r\n                if (this.options.fields[field].validators[validatorName].enabled === false) {\r\n                    continue;\r\n                }\r\n                status = $field.data('bv.result.' + validatorName);\r\n                if (status !== this.STATUS_VALID) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * error.form.bv事件的默认处理程序。\r\n     * 当存在无效字段时将调用它\r\n     *\r\n     * @param {jQuery.Event} e jquery的事件对象\r\n     */\r\n    #onError(e) {\r\n        if (e.isDefaultPrevented()) {\r\n            return;\r\n        }\r\n\r\n        if ('submitted' === this.options.live) {\r\n            // Enable live mode\r\n            this.options.live = 'enabled';\r\n            let that = this;\r\n            for (let field in this.options.fields) {\r\n                (function (f) {\r\n                    let fields = that.getFieldElements(f);\r\n                    if (fields.length) {\r\n                        let type = $(fields[0]).attr('type'),\r\n                            event = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $(fields[0]).get(0).tagName) ? 'change' : that.#changeEvent,\r\n                            trigger = that.options.fields[field].trigger || that.options.trigger || event,\r\n                            events = $.map(trigger.split(' '), function (item) {\r\n                                return item + '.live.bv';\r\n                            }).join(' ');\r\n\r\n                        fields.off(events).on(events, function () {\r\n                            if (that.#exceedThreshold($(this))) {\r\n                                that.validateField($(this));\r\n                            }\r\n                        });\r\n                    }\r\n                })(field);\r\n            }\r\n        }\r\n\r\n        // Determined the first invalid field which will be focused on automatically\r\n        for (let i = 0; i < this.$invalidFields.length; i++) {\r\n            let $field = this.$invalidFields.eq(i),\r\n                autoFocus = this.#isOptionEnabled($field.attr('data-bv-field'), 'autoFocus');\r\n            if (autoFocus) {\r\n                // Activate the tab containing the field if exists\r\n                let $tabPane = $field.parents('.tab-pane'), tabId;\r\n                if ($tabPane && (tabId = $tabPane.attr('id'))) {\r\n                    $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').tab('show');\r\n                }\r\n\r\n                // Focus the field\r\n                $field.focus();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * success.form.bv事件的默认处理程序。\r\n     * 当所有字段都有效时，将调用它\r\n     *\r\n     * @param {jQuery.Event} e jquery的事件对象\r\n     */\r\n    #onSuccess(e) {\r\n        if (e.isDefaultPrevented()) {\r\n            return;\r\n        }\r\n\r\n        // 让按钮被禁用\r\n        this.disableSubmitButtons(true);\r\n\r\n        // 使用默认的提交方式提交\r\n        this.defaultSubmit();\r\n    }\r\n\r\n\r\n    /**\r\n     * 使用默认提交方式提交表单。\r\n     * 它在提交表单时也不执行任何验证\r\n     */\r\n    defaultSubmit() {\r\n        if (this.$submitButton) {\r\n            // Create hidden input to send the submit buttons\r\n            $('<input/>')\r\n                .attr('type', 'hidden')\r\n                .attr('data-bv-submit-hidden', '')\r\n                .attr('name', this.$submitButton.attr('name'))\r\n                .val(this.$submitButton.val())\r\n                .appendTo(this.$form);\r\n        }\r\n\r\n        // Submit form\r\n        this.$form.off('submit.bv').submit();\r\n    }\r\n\r\n}\r\n\r\n\r\nBootstrapValidation.VERSION = Constants.VERSION\r\nBootstrapValidation.DEFAULTS = Constants.DEFAULTS\r\n\r\n\r\n/**\r\n * jQuery API\r\n * ====================================================\r\n */\r\n$.fn[NAME] = function (option) {\r\n    //获取参数\r\n    let params = arguments;\r\n    return this.each(function () {\r\n\r\n        let $this = $(this);\r\n        let data = $this.data('bootstrapValidation');\r\n\r\n        //选项合并\r\n        let options = $.extend({}, $.fn.bootstrapValidation.defaults, 'object' === typeof option && option);\r\n\r\n        if (!data) {\r\n            data = new BootstrapValidation(this, options);\r\n            $this.data('bootstrapValidation', data);\r\n        }\r\n\r\n        if ('string' === typeof option) {\r\n            if (typeof data[option] !== 'function') {\r\n                throw new Error(`Unknown method: ${option}`);\r\n            }\r\n            data[option].apply(data, Array.prototype.slice.call(params, 1));\r\n        }\r\n    });\r\n};\r\n$.fn[NAME].Constructor = BootstrapValidation;\r\n$.fn[NAME].VERSION = Constants.VERSION\r\n$.fn[NAME].defaults = BootstrapValidation.DEFAULTS\r\n$.fn[NAME].validators = Rules;\r\n$.fn[NAME].i18n = {};\r\n$.fn[NAME].utils = Utils\r\n\r\n\r\n\r\n\r\n\r\nexport default BootstrapValidation;\r\n"],"names":["Constants","autoFocus","container","elementClass","events","formInit","formError","formSuccess","fieldAdded","fieldRemoved","fieldInit","fieldError","fieldSuccess","fieldStatus","validatorError","validatorSuccess","excluded","feedbackIcons","valid","invalid","validating","fields","group","live","message","submitButtons","threshold","verbose","Utils","call","functionName","args","apply","this","substring","length","ns","split","func","pop","context","window","i","format","parameters","$","isArray","replace","date","year","month","day","notInFuture","isNaN","parseInt","numDays","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","currentDay","getDate","luhn","value","mul","prodArr","sum","charAt","mod11And10","check","mod37And36","alphabet","modulus","Math","floor","indexOf","Rules","notEmpty","enableByHtml5","$field","required","attr","validate","validator","options","console","log","type","getFieldElements","filter","get","validity","badInput","trim","val","stringLength","html5Attributes","min","max","utf8bytes","maxLength","minLength","isEmptyObject","isNumeric","getDynamicOption","utf8Bytes","str","s","code","charCodeAt","utf8Length","isValid","fn","bootstrapValidation","i18n","between","more","less","NAME","BootstrapValidation","changeEvent","submitIfValid","cacheFields","constructor","el","$form","$invalidFields","$submitButton","$hiddenButton","STATUS_NOT_VALIDATED","STATUS_VALIDATING","STATUS_INVALID","STATUS_VALID","init","that","onError","onSuccess","trigger","addClass","on","e","preventDefault","find","each","field","opts","parseOptions2","extend","prependTo","css","display","width","height","isDefaultPrevented","$target","target","$button","is","eq","parent","off","submit","initField","Event","bv","validators","v","attrName","toLowerCase","enabled","html5AttrMap","onerror","onsuccess","html5AttrName","optionName","optionAttrName","optionValue","onStatus","selector","emptyOptions","Object","keys","forEach","validatorName","total","updateAll","event","tagName","map","item","join","index","fieldElement","$parent","parents","$message","getMessageContainer","remove","updateStatus","data","html","getMessage","appendTo","$icon","insertAfter","$fieldParent","hasClass","tooltip","popover","getOptions","exceedThreshold","validateField","element","cssClasses","n","test","isExcluded","excludedAttr","onFieldValidated","counter","numValidators","result","not","isOptionEnabled","add","option","inArray","status","$allErrors","$errors","isValidField","tabId","$tab","$tabPane","disableSubmitButtons","removeClass","show","isValidContainer","hide","placement","title","content","disabled","removeAttr","validateResult","stop","reject","resolve","done","$f","response","removeData","updateMessage","_submit","undefined","$container","$fields","eventType","f","tab","focus","defaultSubmit","VERSION","DEFAULTS","$$1","params","arguments","$this","defaults","Error","Array","prototype","slice","Constructor","utils"],"mappings":"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"}