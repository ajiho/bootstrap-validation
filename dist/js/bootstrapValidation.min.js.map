{"version":3,"file":"bootstrapValidation.min.js","sources":["../../src/js/index.js"],"sourcesContent":["\r\nclass BootstrapValidation {\r\n    constructor(el,option) {\r\n        console.log('constructor')\r\n        console.log(el)\r\n        console.log(option)\r\n    }\r\n}\r\n\r\n\r\nconsole.log('ssssssssssssssssssssssssssssssss')\r\n\r\n// 定义插件\r\n$.fn.bootstrapValidation = function (option) {\r\n    let params = arguments;\r\n\r\n    console.log('eee')\r\n    console.log(params)\r\n\r\n    return this.each(function () {\r\n\r\n        console.log('fdsfsfsfdsdfsdfs')\r\n\r\n\r\n        let $this = $(this),\r\n            data = $this.data('bootstrapValidation'),\r\n            options = 'object' === typeof option && option;\r\n\r\n        console.log($this,data,options)\r\n\r\n        if (!data) {\r\n            data = new BootstrapValidation(this, options);\r\n            $this.data('bootstrapValidation', data);\r\n        }\r\n\r\n        // 允许调用插件方法\r\n        if ('string' === typeof option) {\r\n            data[option].apply(data, Array.prototype.slice.call(params, 1));\r\n        }\r\n    });\r\n};\r\n\r\n// 默认选项\r\n// 按字母顺序排序\r\n$.fn.bootstrapValidation.DEFAULT_OPTIONS = {\r\n    // 第一个无效字段将自动聚焦\r\n    autoFocus: true,\r\n\r\n    //错误消息容器。可以是:\r\n    // - 'tooltip' 如果要使用引导工具提示显示错误消息\r\n    // - 'popover' 如果要使用引导弹出窗口显示错误消息\r\n    // - css选择器指定的容器\r\n    // 在前两种情况下，由于工具提示/popover应该足够小，因此插件只显示一条错误消息\r\n    // 您还可以为特定字段定义消息容器\r\n    container: null,\r\n\r\n    // 表单CSS类\r\n    elementClass: 'bv-form',\r\n\r\n    // 使用自定义事件名称以避免jQuery调用window.onerror\r\n    // See https://github.com/nghuuphuoc/bootstrapvalidator/issues/630\r\n    events: {\r\n        formInit: 'init.form.bv',\r\n        formError: 'error.form.bv',\r\n        formSuccess: 'success.form.bv',\r\n        fieldAdded: 'added.field.bv',\r\n        fieldRemoved: 'removed.field.bv',\r\n        fieldInit: 'init.field.bv',\r\n        fieldError: 'error.field.bv',\r\n        fieldSuccess: 'success.field.bv',\r\n        fieldStatus: 'status.field.bv',\r\n        validatorError: 'error.validator.bv',\r\n        validatorSuccess: 'success.validator.bv'\r\n    },\r\n\r\n    // 指示将不被验证的字段\r\n    // 默认情况下，插件不会验证以下类型的字段：\r\n    // - disabled\r\n    // - hidden\r\n    // - invisible\r\n    //\r\n    // 该设置由jQuery过滤器组成。接受3种格式：\r\n    // - A string. Use a comma to separate filter\r\n    // - An array. Each element is a filter\r\n    // - An array. Each element can be a callback function\r\n    //      function($field, validator) {\r\n    //          $field is jQuery object representing the field element\r\n    //          validator is the BootstrapValidation instance\r\n    //          return true or false;\r\n    //      }\r\n    //\r\n    // 以下3个设置是等效的：\r\n    //\r\n    // 1) ':disabled, :hidden, :not(:visible)'\r\n    // 2) [':disabled', ':hidden', ':not(:visible)']\r\n    // 3) [':disabled', ':hidden', function($field) {\r\n    //        return !$field.is(':visible');\r\n    //    }]\r\n    excluded: [':disabled', ':hidden', ':not(:visible)'],\r\n\r\n    // 根据字段有效性显示确定/错误/加载图标\r\n    // This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).\r\n    // 由于Bootstrap不提供任何方法来了解其版本，因此此选项无法自动打开/关闭。\r\n    // 换句话说，要使用此功能，您必须将引导程序升级到v3.1.0或更高版本。\r\n    //\r\n    // 例子:\r\n    // - 使用 Glyphicons icons:\r\n    //  feedbackIcons: {\r\n    //      valid: 'glyphicon glyphicon-ok',\r\n    //      invalid: 'glyphicon glyphicon-remove',\r\n    //      validating: 'glyphicon glyphicon-refresh'\r\n    //  }\r\n    // - 使用 FontAwesome icons:\r\n    //  feedbackIcons: {\r\n    //      valid: 'fa fa-check',\r\n    //      invalid: 'fa fa-times',\r\n    //      validating: 'fa fa-refresh'\r\n    //  }\r\n    feedbackIcons: {\r\n        valid: null,\r\n        invalid: null,\r\n        validating: null\r\n    },\r\n\r\n    // 使用验证器规则映射字段名称\r\n    fields: null,\r\n\r\n    // 用于指示元素的CSS选择器由字段组成\r\n    // 默认情况下，每个字段都放置在<div class=“form group”></div>中\r\n    // 如果您的表单组包含许多字段，但并非所有字段都需要验证，则应调整此选项\r\n    group: '.form-group',\r\n\r\n    // 实时验证选项\r\n    // 可以是3个值之一:\r\n    // - enabled: 该插件在字段更改后立即验证字段\r\n    // - disabled: 禁用实时验证。只有在提交表单后才会显示错误消息\r\n    // - submitted: 表单提交后启用实时验证\r\n    live: 'enabled',\r\n\r\n    // 默认无效消息\r\n    message: 'This value is not valid',\r\n\r\n    // 提交按钮选择器\r\n    // 这些按钮将被禁用，以防止有效表单多次提交\r\n    submitButtons: '[type=\"submit\"]',\r\n\r\n    // 如果字段长度小于此字符数，则不会对其进行实时验证\r\n    threshold: null,\r\n\r\n    // 验证字段时是否详细.\r\n    // 可能值:\r\n    // - true:  当一个字段有多个验证器时，将分别检查所有验证器，如果多个验证器中出现错误，则将向用户显示所有验证器\r\n    // - false: 当一个字段有多个验证器时，该字段的验证将在第一次遇到错误时终止。因此，只有与该字段相关的第一条错误消息才会显示给用户\r\n    verbose: true\r\n};\r\n\r\n// 可用验证器\r\n$.fn.bootstrapValidation.validators = {};\r\n\r\n// i18n\r\n$.fn.bootstrapValidation.i18n = {};\r\n\r\n$.fn.bootstrapValidation.Constructor = BootstrapValidation;\r\n\r\n// 可以在验证器类中使用的Helper方法\r\n$.fn.bootstrapValidation.helpers = {\r\n    /**\r\n     * 执行回调函数\r\n     *\r\n     * @param {String|Function} functionName Can be\r\n     * - 全局函数的名称\r\n     * - 命名空间函数的名称（如A.B.C）\r\n     * - 函数\r\n     * @param {Array} args 回调参数\r\n     */\r\n    call: function (functionName, args) {\r\n        if ('function' === typeof functionName) {\r\n            return functionName.apply(this, args);\r\n        } else if ('string' === typeof functionName) {\r\n            if ('()' === functionName.substring(functionName.length - 2)) {\r\n                functionName = functionName.substring(0, functionName.length - 2);\r\n            }\r\n            let ns = functionName.split('.'),\r\n                func = ns.pop(),\r\n                context = window;\r\n            for (let i = 0; i < ns.length; i++) {\r\n                context = context[ns[i]];\r\n            }\r\n            return (typeof context[func] === 'undefined') ? null : context[func].apply(this, args);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 设置字符串格式\r\n     * 它用于格式化错误消息\r\n     * format（“字段必须介于%s和%s之间”，[10，20]）=“字段必须在10和20之间”\r\n     *\r\n     * @param {String} message\r\n     * @param {Array} parameters\r\n     * @returns {String}\r\n     */\r\n    format: function (message, parameters) {\r\n        if (!$.isArray(parameters)) {\r\n            parameters = [parameters];\r\n        }\r\n\r\n        for (let i in parameters) {\r\n            message = message.replace('%s', parameters[i]);\r\n        }\r\n\r\n        return message;\r\n    },\r\n\r\n    /**\r\n     * 验证日期\r\n     *\r\n     * @param {Number} year 4位数的全年\r\n     * @param {Number} month 月份编号\r\n     * @param {Number} day 日期编号\r\n     * @param {Boolean} [notInFuture] 如果为true，则日期不得在将来\r\n     * @returns {Boolean}\r\n     */\r\n    date: function (year, month, day, notInFuture) {\r\n        if (isNaN(year) || isNaN(month) || isNaN(day)) {\r\n            return false;\r\n        }\r\n        if (day.length > 2 || month.length > 2 || year.length > 4) {\r\n            return false;\r\n        }\r\n\r\n        day = parseInt(day, 10);\r\n        month = parseInt(month, 10);\r\n        year = parseInt(year, 10);\r\n\r\n        if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\r\n            return false;\r\n        }\r\n        let numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        // Update the number of days in Feb of leap year\r\n        if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\r\n            numDays[1] = 29;\r\n        }\r\n\r\n        // Check the day\r\n        if (day <= 0 || day > numDays[month - 1]) {\r\n            return false;\r\n        }\r\n\r\n        if (notInFuture === true) {\r\n            let currentDate = new Date(),\r\n                currentYear = currentDate.getFullYear(),\r\n                currentMonth = currentDate.getMonth(),\r\n                currentDay = currentDate.getDate();\r\n            return (year < currentYear\r\n                || (year === currentYear && month - 1 < currentMonth)\r\n                || (year === currentYear && month - 1 === currentMonth && day < currentDay));\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * 实现Luhn验证算法\r\n     * Credit to https://gist.github.com/ShirtlessKirk/2134376\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Luhn\r\n     * @param {String} value\r\n     * @returns {Boolean}\r\n     */\r\n    luhn: function (value) {\r\n        let length = value.length,\r\n            mul = 0,\r\n            prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\r\n            sum = 0;\r\n\r\n        while (length--) {\r\n            sum += prodArr[mul][parseInt(value.charAt(length), 10)];\r\n            mul ^= 1;\r\n        }\r\n\r\n        return (sum % 10 === 0 && sum > 0);\r\n    },\r\n\r\n    /**\r\n     * 实现模数11，10（ISO 7064）算法\r\n     *\r\n     * @param {String} value\r\n     * @returns {Boolean}\r\n     */\r\n    mod11And10: function (value) {\r\n        let check = 5,\r\n            length = value.length;\r\n        for (let i = 0; i < length; i++) {\r\n            check = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;\r\n        }\r\n        return (check === 1);\r\n    },\r\n\r\n    /**\r\n     * 实施Mod 37、36（ISO 7064）算法\r\n     * Usages:\r\n     * mod37And36('A12425GABC1234002M')\r\n     * mod37And36('002006673085', '0123456789')\r\n     *\r\n     * @param {String} value\r\n     * @param {String} [alphabet]\r\n     * @returns {Boolean}\r\n     */\r\n    mod37And36: function (value, alphabet) {\r\n        alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        let modulus = alphabet.length,\r\n            length = value.length,\r\n            check = Math.floor(modulus / 2);\r\n        for (let i = 0; i < length; i++) {\r\n            check = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\r\n        }\r\n        return (check === 1);\r\n    }\r\n};\r\n\r\n\r\nexport default BootstrapValidation;\r\n"],"names":["BootstrapValidation","constructor","el","option","console","log","$","fn","bootstrapValidation","params","arguments","this","each","$this","data","options","apply","Array","prototype","slice","call","DEFAULT_OPTIONS","autoFocus","container","elementClass","events","formInit","formError","formSuccess","fieldAdded","fieldRemoved","fieldInit","fieldError","fieldSuccess","fieldStatus","validatorError","validatorSuccess","excluded","feedbackIcons","valid","invalid","validating","fields","group","live","message","submitButtons","threshold","verbose","validators","i18n","Constructor","helpers","functionName","args","substring","length","ns","split","func","pop","context","window","i","format","parameters","isArray","replace","date","year","month","day","notInFuture","isNaN","parseInt","numDays","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","currentDay","getDate","luhn","value","mul","prodArr","sum","charAt","mod11And10","check","mod37And36","alphabet","modulus","Math","floor","indexOf"],"mappings":"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"}